// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  lastName      String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  phone         String?
  image         String?
  blocked       Boolean   @default(false)
  role          Role?

  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

//==============================================
model Product {
  id           String   @id @default(cuid())
  sku          String   @unique
  name         String
  slug         String   @unique
  order        String?  @unique
  description  String
  price        Int
  growth       Int
  quantity     Int
  min_quantity Int      @default(1)
  delivery     DateTime

  images          Image[]
  Main_category   Main_category? @relation(fields: [main_categoryId], references: [id])
  main_categoryId String?
  Category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?
  Sub_category    Sub_category?  @relation(fields: [sub_categoryId], references: [id])
  sub_categoryId  String?
  Vendor          Vendor?        @relation(fields: [vendorId], references: [id])
  vendorId        String?
  Color           Color?         @relation(fields: [colorId], references: [id])
  colorId         String?
  collections     Collection[]
  CartItem        Cart_item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id   String @id @default(cuid())
  name String @unique
  url  String

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Main_category {
  id      String  @id @default(cuid())
  name    String  @unique
  slug    String  @unique
  order   String? @unique
  visible Boolean @default(true)

  categories     Category[]
  sub_categories Sub_category[]
  products       Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String  @id @default(cuid())
  name    String  @unique
  order   String? @unique
  slug    String  @unique
  visible Boolean @default(true)

  sub_categories  Sub_category[]
  products        Product[]
  Main_category   Main_category? @relation(fields: [main_categoryId], references: [id])
  main_categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sub_category {
  id      String  @id @default(cuid())
  name    String  @unique
  slug    String  @unique
  order   String? @unique
  visible Boolean @default(true)

  products        Product[]
  Main_category   Main_category? @relation(fields: [main_categoryId], references: [id])
  main_categoryId String?
  Category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id      String  @id @default(cuid())
  name    String  @unique
  slug    String  @unique
  order   String? @unique
  visible Boolean @default(true)

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  hex      String
  order    String?   @unique
  visible  Boolean   @default(true)
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id       String  @id @default(cuid())
  name     String  @unique
  slug     String  @unique
  order    String? @unique
  visible  Boolean @default(true)
  discount Int?
  icon     String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String @id @default(cuid())
  total_amount   Int
  total_quantity Int
  status         Status @default(PENDING)

  cart_items Cart_item[]
  User       User?       @relation(fields: [userId], references: [id])
  userId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  PENDING
  CONFIRMED
  PAID
  FULFILLED
}

model Cart_item {
  id              String  @id @default(cuid())
  priceCartItem   Int
  quantityProduct Int
  orderId         String
  Order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product         Product @relation(fields: [productId], references: [id])
  productId       String
}

model Slider_promo {
  id          String  @id @default(cuid())
  title       String?
  description String?
  url         String?
  image       String
}
