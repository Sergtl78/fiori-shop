// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String
  middleName       String?
  lastName         String?
  email            String    @unique
  password         String?
  emailVerified    DateTime?
  phone            String?
  tin              String?
  personalDiscount Int       @default(0)
  image            String?
  avatar           String?
  blocked          Boolean   @default(false)
  role             Role      @default(NEW)

  shops         Shop[]
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Pre_order Pre_order[]
}

enum Role {
  ADMIN
  MANAGER
  USER
  NEW
}

model Shop {
  id     String @id @default(cuid())
  name   String
  city   String @default("Нижний Новгород")
  street String
  house  String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  orders Order[]

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Pre_order Pre_order[]
}

//==============================================

model Image {
  id   String @id @default(cuid())
  name String @unique
  url  String

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Main_category {
  id         String  @id @default(cuid())
  name       String  @unique
  slug       String  @unique
  sort_order String? @unique

  categories     Category[]
  sub_categories Sub_category[]
  products       Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String  @id @default(cuid())
  name       String  @unique
  sort_order String? @unique
  slug       String  @unique

  sub_categories  Sub_category[]
  products        Product[]
  Main_category   Main_category? @relation(fields: [main_categoryId], references: [id])
  main_categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sub_category {
  id         String  @id @default(cuid())
  name       String  @unique
  slug       String  @unique
  sort_order String? @unique

  Main_category   Main_category? @relation(fields: [main_categoryId], references: [id])
  main_categoryId String?
  Category        Category?      @relation(fields: [categoryId], references: [id])
  categoryId      String?
  products        Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vendor {
  id         String  @id @default(cuid())
  name       String  @unique
  slug       String  @unique
  sort_order String? @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id         String  @id @default(cuid())
  name       String  @unique
  slug       String  @unique
  hex        String
  sort_order String? @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id         String  @id @default(cuid())
  name       String  @unique
  slug       String  @unique
  sort_order String? @unique
  discount   Int?
  icon       String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String  @id @default(cuid())
  name         String  @unique
  slug         String  @unique
  sort_order   String? @unique
  description  String?
  price        Int
  growth       Int
  quantity     Int     @default(0)
  min_quantity Int     @default(1)
  visible      Boolean @default(true)

  Main_category   Main_category? @relation(fields: [main_categoryId], references: [id])
  main_categoryId String?

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  Sub_category   Sub_category? @relation(fields: [sub_categoryId], references: [id])
  sub_categoryId String?

  Vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId String?

  Color   Color?  @relation(fields: [colorId], references: [id])
  colorId String?

  images          Image[]
  collections     Collection[]
  order_items     Order_item[]
  delivery_items  Delivery_item[]
  pre_order_items Pre_order_item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String @id @default(cuid())
  number_order Int    @unique @default(autoincrement())
  total_items  Int
  total_amount Int
  total_prise  Int
  status       Status @default(NEW)

  order_items Order_item[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Shop   Shop?   @relation(fields: [shopId], references: [id])
  shopId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Status {
  NEW
  PENDING
  CONFIRMED
  PAID
  FULFILLED
  CANCELLED
}

model Order_item {
  id              String @id @default(cuid())
  priceCartItem   Int
  quantityProduct Int

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Delivery {
  id             String        @id @default(cuid())
  slug           String        @unique
  dateDelivery   DateTime
  statusDelivery StatusDelivey

  delivery_items Delivery_item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Delivery_item {
  id                String   @id @default(cuid())
  dateDelivery_item DateTime
  quantity          Int
  price             Int

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  Delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId String?

  pre_order_items Pre_order_item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum StatusDelivey {
  ORDERED
  REGISTERED
}

model Pre_order {
  id           String @id @default(cuid())
  number_order Int    @unique @default(autoincrement())
  total_items  Int
  total_amount Int
  total_prise  Int
  status       Status @default(NEW)

  pre_order_items Pre_order_item[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Shop   Shop?   @relation(fields: [shopId], references: [id])
  shopId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pre_order_item {
  id              String @id @default(cuid())
  priceCartItem   Int
  quantityProduct Int

  Pre_order   Pre_order? @relation(fields: [pre_orderId], references: [id], onDelete: Cascade)
  pre_orderId String?

  Delivery_item   Delivery_item? @relation(fields: [delivery_itemId], references: [id])
  delivery_itemId String?

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Page {
  id     String  @id @default(cuid())
  slug   String  @unique
  name   String  @unique
  blocks Block[]
}

model Block {
  id          String  @id @default(cuid())
  slug        String  @unique
  name        String  @unique
  title       String?
  description String?
  url         String?
  image       String?
  sort_order  String? @unique

  Page   Page?   @relation(fields: [pageId], references: [id])
  pageId String?
}

model Slider_promo {
  id          String  @id @default(cuid())
  title       String?
  description String?
  textColor   String  @default("#000000")
  url         String?
  image       String
}
